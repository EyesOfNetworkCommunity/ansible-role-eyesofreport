---
# vim: set bs=2 sw=2 expandtab:
#
# Install MariaDB databases
#
# Eric Belhomme <rico-github@ricozome.net> - 2018-07-22


- name: ensure MariaDB is running
  systemd:
    name: mariadb
    state: started

- name: check if TZINFO data are present in MariaDB core database
  command: >
    mysql --batch --skip-column-names mysql
    --execute="select count(*) from time_zone_name where Name = 'Europe/Paris';"
  register: mysql_tzinfo_count

- name: inject TZINFO into MySQL core database
  shell: mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -uroot mysql
  args:
    executable: /bin/bash
  when: mysql_tzinfo_count.stdout != "1"

- name: install EOR specific configuration for MariaDB server
  copy:
    src: mariadb/server_eor.cnf
    dest: /etc/my.cnf.d/server_eor.cnf
    owner: root
    group: root
    mode: 0664

- name: restart MariaDB server
  systemd:
    name: mariadb
    state: restarted

- name: copy initial SQL schemas on target
  copy:
    src: "mariadb/db/{{ item }}"
    dest: "{{ eor_tmp_install_path }}/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - bp_group_lilac.sql
  - eor_dwh.sql
  - eor_ods.sql
  - eyesofreport.sql
  - fill_date_procedure.sql
  - global_nagiosbp.sql
  - eor_repository.sql
  - dashbuilder.sql

- name: create and initialize sql schema for {{ sql.db.bp_global }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.bp_global }}"
    schema_path: "{{ eor_tmp_install_path }}/global_nagiosbp.sql"

- name: create and initialize sql schema for {{ sql.db.bp_lilac }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.bp_lilac }}"
    schema_path: "{{ eor_tmp_install_path }}/bp_group_lilac.sql"

- name: create and initialize sql schema for {{ sql.db.ods }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.ods }}"
    schema_path: "{{ eor_tmp_install_path }}/eor_ods.sql"

- name: create and initialize sql schema for {{ sql.db.dwh }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.dwh }}"
    schema_path: "{{ eor_tmp_install_path }}/eor_dwh.sql"

- name: create and initialize sql schema for {{ sql.db.technical }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.technical }}"
    schema_path: "{{ eor_tmp_install_path }}/eyesofreport.sql"

- name: create and initialize sql schema for {{ sql.db.repository }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.repository }}"
    schema_path: "{{ eor_tmp_install_path }}/eor_repository.sql"

- name: create and initialize sql schema for {{ sql.db.dashbuilder }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.dashbuilder }}"
    schema_path: "{{ eor_tmp_install_path }}/dashbuilder.sql"

- name: create and initialize sql schema for {{ sql.db.eorweb }} db
  include_tasks: db_init_schema.yml
  vars:
    dbname: "{{ sql.db.eorweb }}"
    schema_path: "{{ eor_install_path }}/eorweb/appliance/eorweb.sql"

- name: create mariadb user for EOR databases
  mysql_user:
    check_implicit_admin: yes
    append_privs: yes
    name: "{{ sql_user.internal.user }}"
    password: "{{ sql_user.internal.password }}"
    priv: "{{ item }}.*:ALL"
    state: present
  with_items:
  - "{{ sql.db.bp_global }}"
  - "{{ sql.db.bp_lilac }}"
  - "{{ sql.db.thruk }}"
  - "{{ sql.db.ods }}"
  - "{{ sql.db.dwh }}"
  - "{{ sql.db.technical }}"
  - "{{ sql.db.repository }}"
  - "{{ sql.db.eorweb }}"
  - "{{ sql.db.dashbuilder }}"

# eor_repository is the only db that might need a dedicated user for
# remote connection
- name: "create mariadb dedicated user for {{ sql.db.repository }}"
  mysql_user:
    check_implicit_admin: yes
    append_privs: yes
    name: "{{ sql_user.external.user }}"
    password: "{{ sql_user.external.password }}"
    priv: "{{ sql.db.repository }}.*:ALL"
    state: present

- name: check if d_time_dimension data are present in {{ sql.db.dwh }} database
  command: >
    mysql --batch --skip-column-names {{ sql.db.dwh }}
    --execute="select count(*) from d_time_dimension;"
  register: mysql_timedimension_count

- block:
  - name: unzip d_time_dimension dataset
    unarchive:
      src: mariadb/db/d_time_dimension.zip
      dest: "{{ eor_tmp_install_path }}/"
  
  - name: inject d_time_dimension tables into {{ sql.db.dwh }} database
    shell: mysql -uroot {{ sql.db.dwh }} < {{ eor_tmp_install_path }}/d_time_dimension.sql
    args:
      executable: /bin/bash
  
  - name: creating indexes on Mariadb databases... may take a long time...
    command: >
      mysql --batch --skip-column-names {{ sql.db.dwh }}
      --execute="use {{ sql.db.dwh }};
      CREATE INDEX idx_d_time_dimension_hour on d_time_dimension(epoch_hour) using btree;
      CREATE INDEX idx_d_time_dimension_day on d_time_dimension(epoch_day) using btree;
      CREATE INDEX idx_d_time_dimension_month on d_time_dimension(epoch_month) using btree;
      CREATE INDEX idx_d_time_dimension_month_hour on d_time_dimension(epoch_month_hour) using btree;
      CREATE INDEX td_dbdate_idx on d_time_dimension(db_datetime) using btree;
      CREATE INDEX idx_d_time_dimension_year on d_time_dimension(year) using btree;
      CREATE INDEX idx_d_time_dimension_month_num on d_time_dimension(month) using btree;"
  
  when: mysql_timedimension_count.stdout|int >= 2000000

# todo: expect mysql secure


### MySQL java connetor ###
- name: get MySQL Java connector package
  include_tasks: get_third_party_package.yml
  vars:
    package: "{{ pkg_mysqljdbc }}"

- name: create directory for mysql java connector
  file:
    path: "{{ eor_install_path }}/mysql-java-connector"
    owner: root
    group: "{{ eor_group }}"
    mode: 0755
    state: directory

- name: create temp dir to extract MySQL java connector
  file:
    path: "{{ eor_tmp_install_path }}/mysql-connector-java/"
    state: directory

- name: uncompress MySQL java connector
  unarchive:
    src: "{{ eor_tmp_install_path }}/{{ pkg_mysqljdbc.uri | basename }}"
    dest: "{{ eor_tmp_install_path }}/mysql-connector-java/"
    remote_src: yes

- name: find JAR file
  find:
    paths: "{{ eor_tmp_install_path }}/mysql-connector-java"
    patterns: 'mysql-connector-java-*-bin.jar'
    recurse: yes
  register: find_jar

- set_fact:
    eor_mysql_connector_java_path: "{{ find_jar.files[0].path }}"
  when: find_jar.matched == 1
 
- name: copy MySQL java connector to final location
  copy:
    src: "{{ eor_mysql_connector_java_path }}"
    dest: "{{ eor_install_path }}/mysql-java-connector/{{ eor_mysql_connector_java_path | basename }}"
    owner: root
    group: "{{ eor_group }}"
    mode: 0644
    remote_src: yes

- name: delete extracted MySQL java connector temp dir
  file:
    path: "{{ eor_tmp_install_path }}/mysql-connector-java/"
    state: absent

- set_fact:
    eor_mysql_connector_java_path: "{{ eor_install_path }}/mysql-java-connector/{{ eor_mysql_connector_java_path | basename }}"




